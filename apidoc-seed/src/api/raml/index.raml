#%RAML 0.8
---
title: API Resource Example
baseUri: https://localhost/api/{version}
version: v1
protocols: [HTTPS]
mediaType: application/json

traits:
  - private: !include _traits/private.raml

# GET /organizations
# ====================================
/organizations:
  description: An organization add and listen sensors. The users belong to the organization.
  get:
    description: Get all organizations. The value contact can be null if the organization is new.
    responses:
      200:
        body:
          application/json:
            example: |
              [{ "id" : 1, "name" : "AMT", "contact" : {"id": 1}}]

  # POST /organizations
  # ====================================
  post:
    description: Create an organization.
    body:
      application/json:
        example: |
          {"name" : "AMT"}
    responses:
      201:
        body:
          application/json:
            example: |
              { "id" : 1, "name" : "AMT" }

  # GET /organizations/:id
  # ====================================
  /{id}:
    get:
      description: Retrieve an organization (id, name, list of user, contact person). A user work to only one organization.
      responses:
        200:
          body:
            application/json:
              example: |
                { "id" : 1, "name" : "AMT", "contact" {"id" : 1}}
        404:
          description: The id was not found.

    # PUT /organizations/:id
    # ====================================
    put:
      description : Update an organization. You can update the name or the person of contact. If you change the person of contact, the user always belong to the organization.
      body:
        application/json:
          example: |
            { "name" : "AMT", "contact" : {"id" : 1} }

      responses:
        200:
          body:
            application/json:
              example: |
                { "id" : "1", "name" : "AMT", "contact" : {"id": 1}}
        404:
          description : The id was not found.
          
        400:
          description: The contact_id do not exist.
    
    # DELETE /organizations/:id
    # ====================================
    delete:
      description: Delete an organization. This action delete all users, sensors, observations and facts of the organization.
      responses:
        404:
          description: The id was not found.

# GET /users
# ====================================
/users:
  description: A user work in an organization.
  get:
     description: Get all users.
     queryParameters:
       order:
        description: Filter users of an organization.
        example: byOrganizationID
       id:
         description: Filter users by id.
         example: 1
         type: number
     responses :
       200:
         body:
           application/json:
             example: |
               [{"id" : 1, "login" : "doe", "name" : "John Doe", "organization" :{"id": 1}}]
  
  # POST /users
  # ====================================
  post:
    description: Create an user. The user is added to the organization.
    body:
      application/json:
        example: |
          {"login" : "doe", "name" : "John Doe", "pass" : "8234seh348129jbjhiefbiasd", "organization" : {"id" : 1}}
    responses:
      201:
        body:
          application/json:
            example: |
              {"id" : 1, "login" : "doe", "name" : "John Doe", "organization" : { "id" : 1}}
      400:
        description: The organization_id was not found.
  
  # GET /users/:id
  # ====================================
  /{id}:
    get:
      description: Get a user.
      responses:
        200:
          body:
            application/json:
              example: |
                {"id" : 1, "login" : "doe", "name" : "John Doe", "organization" : {"id" : 1}}
        404:
          description: The id was not found.
    
    # PUT /users/:id
    # ====================================
    put:
      description: Update infos of a user. 
      body:
        application/json:
          example: |
            {"login" : "doe", "name" : "John Doe", "organization" : {"id": 1}}
      responses:
        201:
          body:
            application/json:
              example: |
                {"id" : 1, "login" : "doe", "pass" : "8234seh348129jbjhiefbiasd", "name" : "John Doe", "organization" : {"id" : 1}}
        404:
          description: The id was not found.
        
        400:
          description: You can't change the organization_id if the user is an person of contact.
          
    # DELETE /users/:id
    # ====================================
    delete:
      description: Delete a resource.
      responses:
        404:
          description: The id was not found.
        400:
          description: The user is a person of contact.

# GET /sensors
# ====================================
/sensors:
  get:
    description: Get all public sensors.
    queryParameters:
      order:
       description: Filter users of an organization.
       example: byOrganizationID
      id:
       description: Filter by id.
       example: 1
       type: number
      policy:
        description: All public or private sensors.
        example: "public/open/all"
    responses:
      200:
        body:
          application/json:
            example: |
             [{"id":1, "name": "sensors123", "description": "Sensors in room 123", "type" : "Temperature", "open" : "true/false", "organization" : {"id" : 1}}]
    
  # POST /sensors
  # ====================================
  post:
    description: Create a sensor.
    body:
      application/json:
        example: |
          {"name": "sensors123", "description": "Sensors in room 123", "type" : "Temperature", "open" : "true/false", "organization" : {"id" : 1}}
    responses:
      201:
        body:
          application/json:
            example: |
              {"name": "sensors123", "description": "Sensors in room 123", "type" : "Temperature", "open" : "true/false", "organization" : {"id" : 1}}
      400:
        description: The organization_id was not found.
  
  # GET /sensors/:id
  # ====================================  
  /{id}:
    get:
      description: Retrieve a resource.
      responses:
        200:
          body:
            application/json:
              example: |
                {"id" : 1, "create_date": "2014-08-11", open : "true/false", "organization" : {"id" : 1}}
        404:
          description: The id was not found.

    # PUT /sensors/:id
    # ====================================
    put:
      description: Open/Close a sensor
      body:
        application/json:
          example: |
            {open : "true/false"}
      
      responses:
        200:
          body:
            application/json:
              example: |
                {"id" : 1, "create_date": "2014-08-11", open : "true/false", "organization" : {"id" : 1}}
        404:
          description: The id was not found.
        
        400:
          description: The organization_id was not found.
                
    # GET /sensors/:id
    # ====================================
    delete:
      description: Delete a sensor, all facts and all observations.
      responses:
        404:
          description: The id was not found.
          
# GET /observations
# ====================================
/observations:
  description: Observations by sensors
  get:
    description: Get all observations
    queryParameters:
      order:
        description: Get all observations of a sensor.
        example: bySensorID
      id:
        description: Filter by the id of a sensor.
        example: 1
        type: number
        
    responses:
      200:
        body:
          application/json:
            example: |
              [{"id":1, "date": "2014-15-14 00:02:52", "value" : 54, "sensor" : {"id" : 1}}]
  post:
    description: Add an observation
    body:
      application/json:
        example: |
          {"date": "2014-15-14 00:02:52", "value" : 54, "sensor" : {"id" : 1}}
    responses:
      201:
        body:
          application/json:
            example: |
              {"id":1, "date": "2014-15-14 00:02:52", "value" : 54, "sensor" : {"id" : 1}}
      400:
        description: The sensor_id was not found.
  
# GET /facts/summaries
# ====================================
/facts/summaries:
  description: Every days the platform delete the observations and produce a summary. 
  get:
    description: Get all summaries.
    queryParameters:
      order:
        description: Filter fact by organization or by sensor.
        example: byOrganizationId, bySensorId 
      id:
        description: Filter fact by organization or by sensor.
        example: 1
        type: number
    responses:
      200:
        body:
          application/json:
            example: |
               [{ "id" : 1, "date" : "2014-11-09", "max": 15, "average": 10, "min": 5, "sensor": {"id" : 1}, "organization": {"id" : 1} }]
            
  # GET /facts/summaries/:id 
  # ====================================
  /{id}:
    get:
      description: Retrieve a resource.
      responses:
        200:
          body:
            application/json:
              example: |
                { "id" : 1, "date" : "2014-11-09", "max": 15, "average": 10, "min": 5, "sensor": {"id" : 1}, "organization": {"id" : 1} }
        404:
          description: The resource was not found.
    
    # DELETE /facts/summaries/:id 
    # ====================================
    delete:
      description: Delete a resource.
      responses:
        404:
          description: The id was not found.


# GET /facts/numbers
# ====================================
/facts/numbers:
  description: The platform count all observations per sensors.
  get:
    description: Get all numbers.
    queryParameters:
      order:
        description: Get all fact of an organization or a sensor.
        example: bySensorId, byOrganizationId
      id:
        description: Filter by id of an organization or a sensor.
        example: 1
        type: number
    responses:
      200:
        body:
          application/json:
            example: |
               [{ "id" : 1, "date":"2015-12-12", "number": 3, "sensor": {"id" : 1}, "organization": {"id" : 1} }]
            
  # GET /facts/numbers/:id 
  # ====================================
  /{id}:
    get:
      description: Retrieve a resource.
      responses:
        200:
          body:
            application/json:
              example: |
                { "id" : 1, "date":"2015-12-12" ,"number": 3, "sensor": {"id" : 1}, "organization": {"id" : 1} }
        404:
          description: The resource was not found.
    
    # DELETE /facts/numbers/:id 
    # ====================================
    delete:
      description: Delete a resource.
      responses:
        404:
          description: The id was not found.